<?php

namespace {{namespace}}\Generathor;

{{#each imports}}use {{this}};
{{/each}}

/**
 * Automatically generated by Generathor
 *
 * Class {{model}}
 * This is the model class for the table "{{table}}"
 *
{{#each attributes}}
 * @property{{#if type}} {{type}}{{/if}} ${{name}}
{{/each}}{{#each onlyReadAttributes}} * @property-read {{{type}}} ${{name}}
{{/each}}
 */
abstract class {{model}} extends Model
{
    use Filterable;
    use GenerathorKey;
    use Sortable;

{{#each constants}}
    const {{name}} = '{{value}}';

{{/each}}
    protected $primaryKey = {{{primaryKey}}};
{{#unless autoincrement}}

    public $incrementing = false;
{{/unless}}
{{#unless timestamps}}

    public $timestamps = false;
{{/unless}}

    public $sortable = [{{#each attributes}}
        '{{name}}',{{/each}}
    ];

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = '{{table}}';

    public function getRecordLabel()
    {
        return $this->{{recordLabel}} ?? $this->getRouteKey();
    }{{#each belongsToRelations}}

    public function {{name}}()
    {
        return $this->belongsTo({{model}}::class{{#if reference}}, '{{reference.foreignKey}}', '{{reference.ownerKey}}'{{/if}});
    }{{/each}}{{#each hasManyRelations}}

    public function {{name}}()
    {
        return $this->hasMany({{model}}::class{{#if reference}}, '{{reference.foreignKey}}', '{{reference.localKey}}'{{/if}});
    }{{/each}}
}
