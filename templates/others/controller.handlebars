<?php

namespace {{namespace}};

{{#each imports}}
use {{this}};
{{/each}}

/**
 * Automatically generated by Generathor
 * Class {{class}}
 */
class {{class}} extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index({{filterRequest}} $request)
    {
        $list = {{model}}::filter($request->all())
            {{#if queryRelations}}->with({{{queryRelations}}})
            {{/if}}->sortable()
            ->paginate(20);

        return view('generathor.{{context}}.index', compact('list'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{createRequest}} $request)
    {
        $record = new {{model}};{{#each attributes}}
        $record->{{name}} = $request->{{#if (eq type "bool")}}has('{{name}}'){{else}}{{name}}{{/if}};{{/each}}
        $record->save();
        $this->withSuccessMessage('{{label}} created successfully');

        if ($request->_url) {
            return redirect($request->_url);
        }

        return to_route('generathor.{{context}}.show', ['{{recordName}}' => $record->getRouteKey()]);
    }

    /**
     * Display the specified resource.
     */
    public function show({{model}} ${{recordName}})
    {
        return view('generathor.{{context}}.show', compact('{{recordName}}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{model}} ${{recordName}})
    {
        return view('generathor.{{context}}.edit', compact('{{recordName}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{updateRequest}} $request, {{model}} ${{recordName}})
    {
        {{#each attributes}}${{../recordName}}->{{name}} = $request->{{#if (eq type "bool")}}has('{{name}}'){{else}}{{name}}{{/if}};
        {{/each}}${{recordName}}->save();
        $this->withSuccessMessage('{{label}} updated successfully');

        if ($request->_url) {
            return redirect($request->_url);
        }

        return to_route('generathor.{{context}}.show', ['{{recordName}}' => ${{recordName}}->getRouteKey()]);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{model}} ${{recordName}}, Request $request)
    {
        ${{recordName}}->delete();
        $this->withSuccessMessage(__('{{label}} deleted successfully'));

        if ($request->_url) {
            return redirect($request->_url);
        }

        return back();
    }
{{#each hasManyRelations}}

    /**
     * Get {{label}} relation.
     */
    public function show{{capitalizedRelationAttribute}}({{../model}} ${{../recordName}}, Filter{{model}}Request $request)
    {
        $list = ${{../recordName}}->{{attribute}}()
            ->filter($request->all())
            {{#if queryRelations}}->with({{{queryRelations}}})
            {{/if}}->sortable()
            ->paginate(20);

        return view('generathor.{{../context}}.{{relationContext}}', compact('list', '{{../recordName}}'));
    }
{{/each}}
{{#each belongsToRelations}}

    /**
     * Get {{label}} relation.
     */
    public function show{{capitalizedRelationAttribute}}({{../model}} ${{../recordName}})
    {
        return view('generathor.{{../context}}.{{relationContext}}', compact('{{../recordName}}'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store{{capitalizedRelationAttribute}}({{../model}} ${{../recordName}}, {{createRelationRequest}} $request)
    {
        $record = new {{model}};{{#each attributes}}
        $record->{{name}} = $request->{{#if (eq type "bool")}}has('{{name}}'){{else}}{{name}}{{/if}};{{/each}}
        $record->save();

        {{#each references}}${{../../recordName}}->{{this}} = $record->{{@key}};
        {{/each}}
        ${{../recordName}}->save();
        $this->withSuccessMessage(__('{{label}} created successfully'));

        return back();
    }

    /**
     * Detach {{model}}.
     */
    public function detach{{capitalizedRelationAttribute}}({{../model}} ${{../recordName}})
    {
        {{#each references}}${{../../recordName}}->{{this}} = null;
        {{/each}}
        ${{../recordName}}->save();
        $this->withSuccessMessage(__('{{label}} detached successfully'));

        return back();
    }

    /**
     * Attach {{model}}.
     */
    public function attach{{capitalizedRelationAttribute}}({{../model}} ${{../recordName}}, {{attachRelationRequest}} $request)
    {
        {{#each references}}${{../../recordName}}->{{this}} = $request->{{this}};
        {{/each}}
        ${{../recordName}}->save();
        $this->withSuccessMessage(__('{{label}} attached successfully'));

        return back();
    }
{{/each}}
{{#if search}}

    /**
     * Search {{model}}
     */
    public function search()
    {
        $term = request()->query('term');
        if (! is_string($term)) {
            return [];
        }

        return {{model}}::query()
            ->where('{{search.attribute}}', 'LIKE', "%{$term}%")
            ->orWhere('{{search.key}}', $term)
            ->limit(10)
            ->get()
            ->map(function ({{model}} $item) {
                return [
                    'id' => $item->getKey(),
                    'label' => $item->getRecordLabel(),
                ];
            });
    }
{{/if}}
}
