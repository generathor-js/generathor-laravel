<?php

namespace App\Models\Generathor;

use Illuminate\Database\Eloquent\ModelNotFoundException;

/**
 * Automatically generated by Generathor
 *
 * This trait is based on the original 'HasCompositeKey' from the 'thiagoprz/eloquent-composite-key' package.
 * Original trait author: Thiago Przyczynski
 * Source: https://github.com/thiagoprz/eloquent-composite-key
 */
trait GenerathorKey
{
    /**
     * Retrieve the model for a bound value.
     *
     * @param  mixed  $value
     * @param  string|null  $field
     * @return \Illuminate\Database\Eloquent\Model|null
     */
    public function resolveRouteBinding($value, $field = null)
    {
        $keys = $this->getKeyName();
        if (! is_array($keys)) {
            return parent::resolveRouteBinding($value, $field);
        }
        if (! is_string($value)) {
            return null;
        }

        $value = json_decode(base64_decode($value), true);
        if (! $value) {
            return null;
        }
        $query = static::query();
        foreach ($keys as $key) {
            if (isset($value[$key])) {
                $query->where($key, $value[$key]);
            }
        }

        return $query->firstOrFail();
    }

    /**
     * Get the value of the model's route key.
     *
     * @return mixed
     */
    public function getRouteKey()
    {
        $keys = $this->getKeyName();
        if (! is_array($keys)) {
            return parent::getRouteKey();
        }
        $info = [];
        foreach ($keys as $key) {
            $info[$key] = $this->getAttribute($key);
        }

        return base64_encode(json_encode($info));
    }

    /**
     * Set the keys for a save update query.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    protected function setKeysForSaveQuery($query)
    {
        $keys = $this->getKeyName();

        return ! is_array($keys) ? parent::setKeysForSaveQuery($query) : $query->where(function ($q) use ($keys) {
            foreach ($keys as $key) {
                $q->where($key, '=', $this->getOriginal($key));
            }
        });
    }

    /**
     * @return bool
     */
    public function getIncrementing()
    {
        return is_array($this->getKeyName()) ? false : parent::getIncrementing();
    }

    /**
     * Get the value of the model's primary key.
     *
     * @return mixed
     */
    public function getKey()
    {
        $keys = $this->getKeyName();

        return ! is_array($keys) ? parent::getKey() : array_map(function ($key) {
            return $this->getAttribute($key);
        }, $keys);
    }

    /**
     * Find a model by its primary key.
     *
     * @param  mixed  $id
     * @param  array|string  $columns
     * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null
     */
    public static function find($id, $columns = ['*'])
    {
        $model = new static;
        $keys = $model->getKeyName();

        if (! is_array($keys)) {
            return $model->parentFind($id, $columns);
        }

        return $model->where(function ($query) use ($id, $keys) {
            foreach ($keys as $idx => $key) {
                if (isset($id[$idx])) {
                    $query->where($key, $id[$idx]);
                } elseif (isset($id[$key])) {
                    $query->where($key, $id[$key]);
                } else {
                    $query->whereNull($key);
                }
            }
        })->first($columns);
    }

    private function parentFind($id, $columns = ['*'])
    {
        return parent::find($id, $columns);
    }

    /**
     * Find a model by its primary key or throw an exception.
     *
     * @param  mixed  $id
     * @param  array|string  $columns
     * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static|static[]
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<\Illuminate\Database\Eloquent\Model>
     */
    public static function findOrFail($id, $columns = ['*'])
    {
        $record = static::find($id, $columns);
        if (! $record) {
            throw new ModelNotFoundException;
        }

        return $record;
    }
}
